#!/usr/bin/env python

from datetime import datetime
import re
from flask import Flask, make_response, jsonify
import numpy as np
from flask_cors import CORS
#from flask_compress import Compress
app = Flask(__name__)
#Compress(app)
CORS(app)
from glob import glob
import argparse
import webbrowser
import os
import re
import json
import pickle
from functools import lru_cache
from pathlib import Path
import sys
import simplejpeg
import logging
log = logging.getLogger('werkzeug')
log.setLevel(logging.ERROR)
from threading import Timer


maxsize = None



parser = argparse.ArgumentParser(description='Provide simple interface to label bee images')
parser.add_argument('imgpath',type=str,help='Path to images')
#parser.add_argument('--refreshcache',help='Whether to refresh the cache',action="store_true")
parser.add_argument('--port',required=False,type=int,help='Port')
parser.add_argument('--nobrowser',help='Skip launching a web browser', action='store_true')
parser.add_argument('--highlight',help='Whether to highlight the tags in compact images', action='store_true')
args = parser.parse_args()

#TODO Convert whole file to pathlib

#We might have been given a folder that isn't the root folder of a day's work (i.e. we want the folder that contains the sessions)
#TODO I'm not sure how to deal with this (supposing we are given the home (~) folder?)
#for now I look for where the np files are and work backwards...
pathtoimgsdir = Path(args.imgpath).resolve()
print("Given path: %s" % pathtoimgsdir)
#print(list(pathtoimgsdir.glob('*')))
examplenpfilepath = next(pathtoimgsdir.rglob('*.np'))
print("Example file: %s" % examplenpfilepath)
pathtoimgsdir = Path(*examplenpfilepath.parts[:-5]).as_posix() #TODO Convert rest of doc to using pathlib
print("Using %s as path to foldering containing all sessions." % pathtoimgsdir)

#if pathtoimgsdir[-1]=='/': pathtoimgsdir=pathtoimgsdir[:-1] 
#print(pathtoimgsdir)
#pathtoimgsdir = os.path.abspath(pathtoimgsdir)
scriptpath = os.path.dirname(os.path.realpath(__file__))
os.chdir(scriptpath)

try:
    os.mkdir('cache')
except FileExistsError:
    pass
    
if not args.nobrowser: 
    #help from https://stackoverflow.com/questions/69239280/run-a-webbrowser-and-continue-script-without-close-the-browser
    #the problem is, if this is call opens the browser (rather than just opens a tab) it seems to hang for a few seconds.
    def open_browser():
        webbrowser.open("file://" + os.path.realpath('index.html'),new=2)    
    Timer(1, open_browser).start()    
    print("BACK")
if 'port' in args:
    port = args.port
else:
    port = 5000

@lru_cache(maxsize=maxsize)
def getimgfilelist(path,camid=None):
    return sorted(glob('%s/*.np'%(path)))

def getimgfilename(session,photo_set,box,camid,number):
    #return '/home/mike/Documents/Research/rsync_bee/test/beephotos/2024-06-13/unnamed_session/unnamed_set/13/02G14695548/20240613_10+21+16.691258_0000.np'
    try:
        pathtofiles = pathtoimgsdir+'/'+session+'/'+photo_set+'/'+box+'/'+camid;
        imgfilelist = getimgfilelist(pathtofiles)
        fn = imgfilelist[number]
    except:
        fn = "-" 
    return fn
    
def getdatafilename(session,photo_set,box,camid,number,source):
    """
    Returns data folder, and full path+filename
    """
    fn = getimgfilename(session,photo_set,box,camid,number)
    fnsplit = fn.split('/')
    pathtodata = '/'.join(fnsplit[:-1])+'/'+source
    return pathtodata, pathtodata+'/'+fnsplit[-1][:-2]+'json'
    

@app.route('/')
def hello_world():
    return 'root node of bee label API.'

@app.route('/getsessions')
def getsessions():
    subfolders = [ f.name for f in os.scandir(pathtoimgsdir) if f.is_dir() ]
    return json.dumps(subfolders)
    
@app.route('/getsets/<string:session>')
def getsets(session):
    subfolders = [ f.name for f in os.scandir(pathtoimgsdir+'/'+session) if f.is_dir() ]
    return json.dumps(subfolders)


@app.route('/getboxes/<string:session>/<string:photo_set>')
def getboxes(session,photo_set):
    subfolders = [ f.name for f in os.scandir(pathtoimgsdir+'/'+session+'/'+photo_set) if f.is_dir() ]
    return json.dumps(subfolders)

@app.route('/getcams/<string:session>/<string:photo_set>/<string:box>')
def getcams(session,photo_set,box):
    subfolders = [ f.name for f in os.scandir(pathtoimgsdir+'/'+session+'/'+photo_set+'/'+box) if f.is_dir() ]
    return json.dumps(subfolders)

   
@app.route('/savepos/<string:session>/<string:photo_set>/<string:box>/<string:camid>/<int:number>/<int:x>/<int:y>/<int:confidence>/<string:label>')
def savepos(session,photo_set,box,camid,number,x,y,confidence,label):
    pathtodata, fn = getdatafilename(session,photo_set,box,camid,number,"btviewer")

    from pathlib import Path
    
    try:
        data = json.load(open(fn,'r'))
    except FileNotFoundError:        
        data = []  
        Path(pathtodata).mkdir(parents=True, exist_ok=True) #makes the path, helps if it doesn't exist.
    except json.decoder.JSONDecodeError:
        print("WARNING: Failed to decode json file")
        data = []

    if label=="none": #special none label
        label=""
    data.append({"x": x, "y": y, "label": label, "source": "btviewer", "meta":"", "version": "btqviewer, v0.1", "confidence":confidence})
    json.dump(data,open(fn,'w'))
    return ""
    
@app.route('/deleteallpos/<string:session>/<string:photo_set>/<string:box>/<string:camid>/<int:number>')
def deleteallpos(session,photo_set,box,camid,number):
    pathtodata, fn = getdatafilename(session,photo_set,box,camid,number,"btviewer")

    from pathlib import Path
    
    try:
        data = json.load(open(fn,'r'))
    except FileNotFoundError:

        Path(pathtodata).mkdir(parents=True, exist_ok=True) #makes the path, helps if it doesn't exist.
    except json.decoder.JSONDecodeError:
        pass
    json.dump([],open(fn,'w'))
    return ""       

#http://127.0.0.1:5000/loadpos/13JuneCalTest/cal1/12/02G14695547/0
@app.route('/loadpos/<string:session>/<string:photo_set>/<string:box>/<string:camid>/<int:number>')
def loadpos(session,photo_set,box,camid,number):
    alldata = []
    source_types = ['testsource','btviewer','btretrodetect','btalignment','btinference','btcolour']
    source_types = source_types + [st+'_copy' for st in source_types] #can now have copies!
    for source in source_types:
        _, fn = getdatafilename(session,photo_set,box,camid,number,source)
        try:
            data = json.load(open(fn,'r'))
            print("Found %s" % source)
        except FileNotFoundError:
            print("File not found!")
            data = []  
        except json.decoder.JSONDecodeError:
            print("WARNING: Failed to decode json file")
            data = []
        
        alldata.extend(data)
        
    return json.dumps(alldata)


@app.route('/getimage/<string:session>/<string:photo_set>/<string:box>/<string:camid>/<int:number>/<int:x1>/<int:y1>/<int:x2>/<int:y2>')
def getimage(session,photo_set,box,camid,number,x1,y1,x2,y2):
    fn = getimgfilename(session,photo_set,box,camid,number)

    try:
        rawdata = np.load(fn,allow_pickle=True)   
    except FileNotFoundError:
        print("Not found %s" % fn)
        return jsonify({})
    n = rawdata['index']
    img = rawdata['img']
    data = rawdata['record']

    if img is None:
        if 'jpgimg' in rawdata:
            img = simplejpeg.decode_jpeg(rawdata['jpgimg'])[:,:,0].astype(float)
            if 'jpgimg_processing' in rawdata:
                mfactor = rawdata['jpgimg_processing']['multiplier']
                sfactor = rawdata['jpgimg_processing']['scalingfactor']
            else:
                mfactor = 10 #backward compatible
                sfactor = 1  #backward compatible
            img/=mfactor
            
            if sfactor!=1: img = np.repeat(np.repeat(img, sfactor,axis=1),sfactor,axis=0)
        else:
            return jsonify({'index':-1,'photo':'failed','record':'failed'})
        if 'imgpatches' in rawdata:
            for imgpatch in rawdata['imgpatches']:

                patchhalfwidth = imgpatch['raw_patch'].shape[0]//2
                x = min(max(imgpatch['x'],12),img.shape[1]-patchhalfwidth)
                y = min(max(imgpatch['y'],12),img.shape[0]-patchhalfwidth)
                try:
                    img[y-patchhalfwidth:y+patchhalfwidth,x-patchhalfwidth:x+patchhalfwidth] = imgpatch['raw_patch']
                    if args.highlight: 
                        img[y-patchhalfwidth:y+patchhalfwidth,x-patchhalfwidth:x+patchhalfwidth]+=5
                        img[y-patchhalfwidth,x-patchhalfwidth:x+patchhalfwidth]+=50
                        img[y+patchhalfwidth,x-patchhalfwidth:x+patchhalfwidth]+=50
                        img[y-patchhalfwidth:y+patchhalfwidth,x-patchhalfwidth]+=50
                        img[y-patchhalfwidth:y+patchhalfwidth,x+patchhalfwidth]+=50
                        img[y-patchhalfwidth:y+patchhalfwidth,x-patchhalfwidth:x+patchhalfwidth] += 5 #brighten just to show where it was.    
                except:
                    print("Patch on edge of image, not sure how to deal with this, so ignoring the patch!")
                    

    img = img.astype(float)

    steps = int((x2-x1)/500)
    if steps<1: steps = 1

    img = (img.T[x1:x2,y1:y2]).T
    k = int(img.shape[0] / steps)
    l = int(img.shape[1] / steps)
    img = img[:k*steps,:l*steps].reshape(k,steps,l,steps).max(axis=(-1,-3))

    return jsonify({'index':n,'photo':img.tolist(),'record':data,'filename':fn})

if __name__ == "__main__":
    app.run(host="0.0.0.0",port=port)

